import asyncio
from aiogram import Bot, Dispatcher
from aiogram.methods import SetMyDescription

from handlers import user_commands
from callbacks import packs, subscription, train, main_commands
from modules import support_module, payment_module, premium_module, settings_module

from config_reader import config
from middlewares.check_sub import CheckSubscription
from middlewares.antiflood import AntiFloodMiddleware
from modules.payment_module import process_pre_checkout_query
from utils.database import db_start, db_settings_start


# logic
# —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
# 1) —É—á–∏—Ç—å —Å–ª–æ–≤–∞
# 2) —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–æ—Å—ã, –∏–Ω—Ç–µ—Ä–≤—å—é
# 3) —Å–ª—É—à–∞—Ç—å –ø–µ—Å–Ω–∏ –∏ —É—á–∏—Ç—å —Å–ª–æ–≤–∞
# 4) –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å *
# 5) –≤—ã—É—á–∏—Ç—å –∞–∫—Ü–µ–Ω—Ç—ã (–±—Ä–∏—Ç–∞–Ω—Å–∫–∏–π/–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π) *


async def main():
    bot = Bot(config.bot_token.get_secret_value(), parse_mode="HTML")
    dp = Dispatcher()

    # dp.message.middleware(CheckSubscription())
    dp.message.middleware(AntiFloodMiddleware())

    dp.pre_checkout_query.register(process_pre_checkout_query)
    # dp.message.register(successful_payment, SuccessfulPayment)

    dp.include_routers(
        subscription.router,
        user_commands.router,
        main_commands.router,
        support_module.router,
        train.router,
        payment_module.router,
        settings_module.router,
        premium_module.router,
        packs.router,
    )

    await bot(SetMyDescription(
        description="hello! it is a bot created for improving your english üá¨üáß and spanish üá™üá∏ skills"))
    await bot.delete_webhook(drop_pending_updates=True)
    await db_start()
    await db_settings_start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
